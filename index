<!DOCTYPE html>
<html lang="tr">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Sentient Mosaic</title>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet">
<style>
  :root{
    --bg:#0b0b0f; --card:#14141b; --muted:#9aa3b2; --text:#e5e7eb;
    --primary:#4f46e5; --primary-2:#6366f1; --accent:#22c55e; --danger:#ef4444; --ink:#0f1117;
    --grid:#1f2533; --grid2:#2a3345;
  }
  *{box-sizing:border-box}
  body{margin:0;background:var(--bg);color:var(--text);font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto}
  .wrap{max-width:1200px;margin:26px auto 50px;padding:0 16px}
  h1{font-size:34px;margin:0 0 6px;text-align:center;font-weight:800}
  .sub{opacity:.8;text-align:center;margin:0 0 18px}
  .row{display:flex;gap:8px;flex-wrap:wrap;align-items:center;justify-content:center;margin-bottom:14px}
  input[type="text"], textarea{background:var(--ink);border:1px solid var(--grid);color:var(--text);border-radius:10px;padding:10px 12px;outline:none}
  input[type="text"]{width:220px}
  textarea{width:360px;min-height:42px;resize:vertical}
  input[type="file"]{color:var(--muted)}
  button{background:var(--primary);border:0;color:#fff;border-radius:10px;padding:10px 14px;font-weight:600;cursor:pointer}
  button:hover{background:var(--primary-2)}
  .btn-ghost{background:#0f1117;border:1px solid var(--grid);color:var(--text)}
  .muted{color:var(--muted)}
  .ok{color:var(--accent);font-weight:700}
  .warn{color:var(--danger);font-weight:700}

  /* Board + zoom/pan */
  .board-wrap{background:#fff;border-radius:16px;border:1px solid var(--grid);padding:12px}
  .toolbar{display:flex;gap:8px;justify-content:flex-end;margin:0 0 8px}
  .board-viewport{position:relative;background:#fff;border:1px dashed var(--grid2);border-radius:12px;overflow:hidden;height:min(75vh,900px);touch-action:none}
  .board{position:absolute;left:0;top:0;transform-origin:0 0;image-rendering:pixelated;user-select:none}
  .grid{display:grid;gap:1px;background:var(--grid2)}
  .cell{width:18px;height:18px;background:#fff;position:relative}
  .cell.blocked{background:#f3f4f6}
  .cell.free:hover{outline:2px solid #f59e0b;outline-offset:-2px;cursor:pointer}
  .cell.claimed{background:#e2e8f0}
  .cell img{position:absolute;inset:0;width:100%;height:100%;object-fit:cover;border-radius:2px}
  .tip{position:absolute;left:50%;bottom:100%;transform:translate(-50%,-6px);background:#111827;color:#fff;padding:6px 8px;border-radius:8px;white-space:nowrap;font-size:12px;display:none;border:1px solid #374151}
  .cell:hover .tip{display:block;pointer-events:none}

  .legend{display:flex;gap:10px;align-items:center;justify-content:center;margin-top:10px}
  .dot{width:12px;height:12px;border-radius:3px;display:inline-block;border:1px solid var(--grid2)}
  .d1{background:#fff}.d2{background:#f3f4f6}.d3{background:#e2e8f0}
</style>
</head>
<body>
  <div class="wrap">
    <h1>Sentient Mosaic</h1>
    <p class="sub">Topluluk profillerinden piksel mozaik üß© ‚Äì <span id="openState" class="ok">A√ßƒ±k</span></p>

    <!-- Form -->
    <div class="row">
      <input id="username" type="text" placeholder="Twitter kullanƒ±cƒ± adƒ±n" />
      <input id="file" type="file" accept="image/png, image/jpeg" />
      <textarea id="note" maxlength="120" placeholder="Dobby'e notun (120 karakter)"></textarea>
      <button id="claimBtn">Se√ßilen h√ºcreye yerle≈ütir</button>
      <button id="clearSel" class="btn-ghost">Se√ßimi temizle</button>
    </div>
    <p class="sub muted" id="hint">Bir h√ºcre se√ßmek i√ßin mozaikte bo≈ü (a√ßƒ±k) alana tƒ±klayƒ±n. (Her kullanƒ±cƒ± en fazla 1 h√ºcre alabilir)</p>

    <!-- Board -->
    <div class="board-wrap">
      <div class="toolbar">
        <button id="zoomIn">Ôºã</button>
        <button id="zoomOut">Ôºç</button>
        <button id="zoomReset" class="btn-ghost">%100</button>
      </div>
      <div class="board-viewport" id="viewport">
        <div id="board" class="board">
          <div id="grid" class="grid"></div>
        </div>
      </div>
      <div class="legend">
        <span class="muted">A√ßƒ±klama:</span>
        <span><i class="dot d1"></i> Se√ßilebilir</span>
        <span><i class="dot d2"></i> Kapalƒ± (logo dƒ±≈üƒ±)</span>
        <span><i class="dot d3"></i> Dolu</span>
      </div>
    </div>
  </div>

  <!-- Firebase v10 CDN -->
  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
    import {
      getFirestore, collection, doc, getDoc, getDocs, query, where, onSnapshot,
      setDoc, serverTimestamp
    } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";
    import {
      getStorage, ref as sRef, uploadBytes, getDownloadURL
    } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-storage.js";

    /* === Firebase Config (seninki) === */
    const firebaseConfig = {
      apiKey: "AIzaSyC5wMcRcmXlFy53D1EJ3J8BkIKy3_Fb3OE",
      authDomain: "sentient-mosaic.firebaseapp.com",
      projectId: "sentient-mosaic",
      storageBucket: "sentient-mosaic.firebasestorage.app",
      messagingSenderId: "270660218350",
      appId: "1:270660218350:web:4882d74709e8bfcbff72ff",
      measurementId: "G-526BY2M6TP"
    };

    const app = initializeApp(firebaseConfig);
    const db  = getFirestore(app);
    const stg = getStorage(app);

    /* === Elements === */
    const els = {
      openState:  document.getElementById('openState'),
      username:   document.getElementById('username'),
      file:       document.getElementById('file'),
      note:       document.getElementById('note'),
      claimBtn:   document.getElementById('claimBtn'),
      clearSel:   document.getElementById('clearSel'),
      viewport:   document.getElementById('viewport'),
      board:      document.getElementById('board'),
      grid:       document.getElementById('grid'),
      zoomIn:     document.getElementById('zoomIn'),
      zoomOut:    document.getElementById('zoomOut'),
      zoomReset:  document.getElementById('zoomReset'),
      hint:       document.getElementById('hint'),
    };

    /* === Global state === */
    let CFG = {
      gridCols: 40, gridRows: 40, cellPx: 16,
      mosaicOpen: true, maxClaimPerUser: 1, logoMaskUrl: ""
    };
    let scale = 1, pan = {x:0,y:0}, dragging = false, dragStart={x:0,y:0}, panStart={x:0,y:0};
    let selected = null; // {r,c}
    let blocked = new Set(); // "r_c" (logo dƒ±≈üƒ±)
    let claimed = new Map(); // "r_c" -> {username, avatarUrl, note}

    function id(r,c){ return `${r}_${c}`; }

    /* === Load config === */
    async function loadConfig(){
      const snap = await getDoc(doc(db,'settings','config'));
      if(!snap.exists()) return;
      const d = snap.data();
      CFG.gridCols = d.gridCols ?? CFG.gridCols;
      CFG.gridRows = d.gridRows ?? CFG.gridRows;
      CFG.cellPx   = d.cellPx   ?? CFG.cellPx;
      CFG.mosaicOpen = !!d.mosaicOpen;
      CFG.maxClaimPerUser = d.maxClaimPerUser ?? 1;
      CFG.logoMaskUrl = d.logoMaskUrl || "";
      els.openState.textContent = CFG.mosaicOpen ? "A√ßƒ±k" : "Kapalƒ±";
      els.openState.className = CFG.mosaicOpen ? "ok" : "warn";
    }

    /* === Build grid DOM === */
    function buildGrid(){
      els.grid.style.gridTemplateColumns = `repeat(${CFG.gridCols}, ${CFG.cellPx}px)`;
      els.grid.style.gridTemplateRows    = `repeat(${CFG.gridRows}, ${CFG.cellPx}px)`;

      els.grid.innerHTML = "";
      for(let r=0;r<CFG.gridRows;r++){
        for(let c=0;c<CFG.gridCols;c++){
          const d = document.createElement('div');
          d.className = 'cell blocked';
          d.dataset.r = r; d.dataset.c = c;
          d.addEventListener('click', onCellClick);
          els.grid.appendChild(d);
        }
      }
      fitBoard();
    }

    function fitBoard(){
      const w = CFG.gridCols*CFG.cellPx + 2;
      const h = CFG.gridRows*CFG.cellPx + 2;
      els.board.style.width = `${w}px`;
      els.board.style.height= `${h}px`;
      applyTransform();
    }

    function applyTransform(){
      els.board.style.transform = `translate(${pan.x}px,${pan.y}px) scale(${scale})`;
    }

    /* === Mask (logo) y√ºkle ve se√ßilebilir alanlarƒ± hesapla === */
    async function loadMask(){
      blocked.clear();
      const img = new Image();
      img.crossOrigin = "anonymous";
      img.src = CFG.logoMaskUrl;
      await img.decode();

      // Mask‚Äôƒ±, grid boyutuna √∂rnekleyerek "siyah" olan h√ºcreleri a√ßƒ±k say.
      const cv = document.createElement('canvas');
      cv.width = CFG.gridCols; cv.height = CFG.gridRows;
      const ctx = cv.getContext('2d');
      // Logo kare deƒüilse en kƒ±sa kenara sƒ±ƒüdƒ±rƒ±p ortala
      const scaleW = CFG.gridCols / img.width;
      const scaleH = CFG.gridRows / img.height;
      const s = Math.min(scaleW, scaleH);
      const drawW = Math.round(img.width*s);
      const drawH = Math.round(img.height*s);
      const offX = Math.floor((CFG.gridCols - drawW)/2);
      const offY = Math.floor((CFG.gridRows - drawH)/2);
      ctx.fillStyle="#fff"; ctx.fillRect(0,0,cv.width,cv.height);
      ctx.drawImage(img, offX, offY, drawW, drawH);

      const pixels = ctx.getImageData(0,0,cv.width,cv.height).data;
      for(let r=0;r<CFG.gridRows;r++){
        for(let c=0;c<CFG.gridCols;c++){
          const idx = (r*cv.width + c)*4;
          const R=pixels[idx], G=pixels[idx+1], B=pixels[idx+2];
          const light = (R+G+B)/3; // siyah ~ 0, beyaz ~ 255
          const open = light < 200; // yeterince koyuysa "se√ßilebilir"
          const cell = els.grid.children[r*CFG.gridCols+c];
          if(open){
            cell.classList.remove('blocked');
            cell.classList.add('free');
          }else{
            cell.classList.remove('free');
            cell.classList.add('blocked');
            blocked.add(id(r,c));
          }
        }
      }
    }

    /* === Firestore - canlƒ± dinleme (dolu h√ºcreler) === */
    function listenCells(){
      const q = collection(db,'cells');
      onSnapshot(q,(snap)=>{
        claimed.clear();
        snap.forEach(d=>{
          const v = d.data();
          claimed.set(id(v.row, v.col), v);
        });
        paintClaims();
      });
    }

    function paintClaims(){
      for(const cell of els.grid.children){
        const r = +cell.dataset.r, c = +cell.dataset.c;
        const key = id(r,c);
        cell.innerHTML = "";
        if(claimed.has(key)){
          cell.classList.remove('free');
          cell.classList.add('claimed');
          const v = claimed.get(key);
          const img = document.createElement('img');
          img.src = v.avatarUrl; cell.appendChild(img);
          const tip = document.createElement('div');
          tip.className = 'tip';
          tip.textContent = `@${v.username}: ${v.note||""}`;
          cell.appendChild(tip);
        }else{
          // sadece mask‚Äôa g√∂re free/blocked class‚Äôlarƒ± var
          if(!blocked.has(key)){
            cell.classList.remove('claimed');
            cell.classList.add('free');
          }
        }
      }
      // Se√ßim i≈üaretini koru
      highlightSelection();
    }

    /* === H√ºcre tƒ±klandƒ±ƒüƒ±nda === */
    function onCellClick(e){
      const r = +e.currentTarget.dataset.r;
      const c = +e.currentTarget.dataset.c;
      const key = id(r,c);
      if(blocked.has(key)){ return; }
      if(claimed.has(key)){ return; }
      selected = {r,c};
      highlightSelection();
    }

    function highlightSelection(){
      for(const cell of els.grid.children) cell.style.outline = "none";
      if(!selected) return;
      const cell = els.grid.children[selected.r*CFG.gridCols+selected.c];
      cell.style.outline = "2px solid #22c55e";
      cell.style.outlineOffset = "-2px";
    }

    /* === Zoom & Pan === */
    function setScale(s){ scale = Math.max(0.3, Math.min(4, s)); applyTransform(); }
    els.zoomIn.onclick  = ()=>setScale(scale*1.15);
    els.zoomOut.onclick = ()=>setScale(scale/1.15);
    els.zoomReset.onclick=()=>{scale=1; pan.x=pan.y=0; applyTransform();};

    els.viewport.addEventListener('mousedown', (e)=>{
      dragging = true; dragStart.x = e.clientX; dragStart.y = e.clientY; panStart.x = pan.x; panStart.y = pan.y;
    });
    window.addEventListener('mouseup', ()=> dragging=false);
    window.addEventListener('mousemove', (e)=>{
      if(!dragging) return;
      pan.x = panStart.x + (e.clientX - dragStart.x);
      pan.y = panStart.y + (e.clientY - dragStart.y);
      applyTransform();
    });
    els.viewport.addEventListener('wheel', (e)=>{
      e.preventDefault();
      const delta = e.deltaY>0 ? 0.9 : 1.1;
      setScale(scale*delta);
    }, {passive:false});

    /* === Claim akƒ±≈üƒ± === */
    els.clearSel.onclick = ()=>{selected=null; highlightSelection();};

    els.claimBtn.onclick = async ()=>{
      try{
        if(!CFG.mosaicOpen){ alert("Mozaik ≈üu an kapalƒ±."); return; }
        const username = (els.username.value||"").trim();
        if(!username){ alert("Kullanƒ±cƒ± adƒ±n gerekli."); return; }
        const file = els.file.files[0];
        if(!file){ alert("Profil g√∂rselini se√ß."); return; }
        if(!selected){ alert("√ñnce mozaikten bir h√ºcre se√ß."); return; }

        // Kullanƒ±cƒ±nƒ±n limiti dolu mu?
        if(CFG.maxClaimPerUser>0){
          const q = query(collection(db,'cells'), where('username','==', username));
          const qs = await getDocs(q);
          if(qs.size >= CFG.maxClaimPerUser){
            alert("Bu etkinlikte alabileceƒüin h√ºcre sayƒ±sƒ±na ula≈ütƒ±n.");
            return;
          }
        }

        const key = id(selected.r, selected.c);
        if(blocked.has(key) || claimed.has(key)){
          alert("Bu h√ºcreye yerle≈üemezsin."); return;
        }

        // Avatar'ƒ± Storage'a y√ºkle
        const ext = file.name.split('.').pop().toLowerCase();
        const safe = `${Date.now()}_${username}.${ext}`.replace(/\s+/g,'_');
        const rf = sRef(stg, `avatars/${safe}`);
        await uploadBytes(rf, file);
        const url = await getDownloadURL(rf);

        // Firestore'a yaz
        const cellDoc = doc(db,'cells', key);
        await setDoc(cellDoc,{
          row: selected.r, col: selected.c,
          username, avatarUrl: url,
          note: (els.note.value||"").trim(),
          createdAt: serverTimestamp()
        });
        selected = null; highlightSelection();
        els.note.value = ""; els.file.value = "";
        alert("H√ºcren eklendi! üéâ");
      }catch(err){
        console.error(err);
        alert("Bir ≈üeyler ters gitti. Konsolu kontrol et.");
      }
    };

    /* === Init === */
    (async ()=>{
      await loadConfig();
      buildGrid();
      await loadMask();
      listenCells();
      // k√º√ß√ºk ho≈üluk: maskeleme bitmeden tƒ±klanmasƒ±n
      els.hint.textContent = "Bo≈ü (beyaz) piksellere tƒ±klayƒ±p yer ayƒ±r, ardƒ±ndan g√∂rselini y√ºkle ve notunu yaz :)";
    })();
  </script>
</body>
</html>
